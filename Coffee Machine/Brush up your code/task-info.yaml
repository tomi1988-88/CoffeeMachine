type: edu
files:
- name: machine/coffee_machine.py
  visible: true
  text: |2-

    class CoffeeMachine:

        def __init__(self):

            self.water = 400
            self.milk = 540
            self.coffee = 120
            self.cups = 9
            self.money = 550
            self.options = {"buy": self.__buy,
                            "fill": self.__fill,
                            "take": self.__take,
                            "remaining": self.__str__
                            }
            self.coffee_types = {"1": {"water": 250, "coffee": 16, "cost": 4},
                                 "2": {"water": 350, "milk": 75, "coffee": 20, "cost": 7},
                                 "3": {"water": 200, "milk": 100, "coffee": 12, "cost": 6},
                                 "back": False}

        def __str__(self):
            print(f"""The coffee machine has:
    {self.water} ml of water
    {self.milk} ml of milk
    {self.coffee} g of coffee beans
    {self.cups} disposable cups
    ${self.money} of money
    """)

        def user_input(self):
            while True:
                user = input("Write action (buy, fill, take):\n")

                if user == "exit":
                    break

                else:
                    self.options.get(user)()

        def __buy(self):
            user = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\n")

            choice = self.coffee_types.get(user)

            if choice:

                check = self.__check_ingredients(choice)

                if check == 1:
                    print("I have enough resources, making you a coffee!")

                    self.water -= choice.get("water", 0)
                    self.milk -= choice.get("milk", 0)
                    self.coffee -= choice.get("coffee", 0)
                    self.cups -= 1
                    self.money += choice.get("cost", 0)
                else:
                    print(f"Sorry, not enough {', '.join(check)}!")

        def __fill(self):
            to_add = ["Write how many ml of water you want to add:\n", "Write how many ml of milk you want to add:\n",
                      "Write how many grams of coffee beans you want to add:\n",
                      "Write how many disposable cups you want to add:\n"]

            to_add = [int(input(i)) for i in to_add]

            self.water += to_add[0]
            self.milk += to_add[1]
            self.coffee += to_add[2]
            self.cups += to_add[3]

        def __take(self):
            print(f"I gave you {self.money}")
            self.money = 0

        def __check_ingredients(self, choice):

            supplies = [("water", self.water - choice.get("water")),
                        ("milk", self.milk - choice.get("milk", 0)),
                        ("coffee beans", self.coffee - choice.get("coffee")),
                        ("cups", self.cups - 1)]

            lack_resources = [i[0] for i in supplies if i[1] < 0]

            if lack_resources:
                return lack_resources
            else:
                return 1


    if __name__ == "__main__":
        coffee_machine = CoffeeMachine()
        coffee_machine.user_input()

    # Write your code here
    # """Starting to make a coffee
    # Grinding coffee beans
    # Boiling water
    # Mixing boiled water with crushed coffee beans
    # Pouring coffee into the cup
    # Pouring some milk into the cup
    # Coffee is ready!"""
    # print(f"""For {x} cups of coffee you will need:
    # {x * 200} ml of water
    # {x * 50} ml of milk
    # {x * 15} g of coffee beans""")

    # water = int(input("Write how many ml of water the coffee machine has:\n"))
    # milk = int(input("Write how many ml of milk the coffee machine has:\n"))
    # coffee = int(input("Write how many grams of coffee beans the coffee machine has:\n"))
    #
    # cups = int(input("Write how many cups of coffee you will need:\n"))
    #
    # we_can_make = min([water // 200, milk // 50, coffee // 15])
    # we_need = cups
    #
    # comparison = we_can_make - we_need
    #
    # if comparison == 0:
    #     print("Yes, I can make that amount of coffee")
    # elif comparison > 0:
    #     print(f"Yes, I can make that amount of coffee (and even {comparison} more than that")
    # else:
    #     print(f"No, I can make only {we_can_make} cups of coffee")
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import CoffeeMachineTest

    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5795#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 23 Jan 2023 12:02:42 UTC
record: 5
